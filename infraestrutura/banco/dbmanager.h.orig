#ifndef DBMANAGER_H
#define DBMANAGER_H

#include <QObject>
#include <QSqlDatabase>
#include <QMap>
#include <QVariant>

// Infraestrutura
#include "infraestrutura/gm_erro.h"
#include "escrituracao/dominio/escrituracao_escrituracao.h"

class DbManager
{
    public:

        enum TiposCampos { NUMERICO, TEXTO, DATA, BIGINT, DATA_HORA };

<<<<<<< HEAD
        struct InformacoesCampos
        {
            QString      nomeCampo;
            TiposCampos  tipoCampo;
            long long    tamanhoCampo = 0;
            QVariant     valor;
=======
        struct InformacoesCampos{
            QString     nomeCampo;
            TiposCampos tipoCampo;
            long long   tamanhoCampo = 0;
            bool        chaveUnica = false;
            bool        notNull = false;
>>>>>>> 89ea464d36a018c0cef1a56fdbf4551449ec58ca
        };

        explicit DbManager(QSqlDatabase &db);

        explicit DbManager(bool carregaAmbientePadrao = false);

        /*######################################## Gets & Sets ###############################################*/

        InformacoesCampos getInformacoesCampos(QString nomeCampo, TiposCampos tipoCampo, long long tamanhoCampo = 0,  bool notNull = false, bool chaveUnica = false);

        QString getTipoCampo(TiposCampos tipo, long long tamanho);

        gm::GMErro lastError();

        void setDatabase(QSqlDatabase &db);

        /*################################### Métodos de Ação ################################################*/

        /**
          * @author Daniel Santos
          * @date   05/07/2018
          * @brief  criarAmbienteApuracaoEscrituracao método responsável.
          */
        void criarAmbienteApuracaoEscrituracao();

        bool criarTabela(QString nomeTabela, QList<InformacoesCampos> listaInformacoesCampos);

        bool isTabelaExiste(QString nomeTabela);

        //bool addRegistro(QString nomeTabela, QString valor);

        bool removeRegistroEscrituracao(QMap<QString, QVariant> mapCampos);

        bool atualizarRegistroEscrituracao(QMap<QString, QVariant> mapCampos, long long id);

        bool addRegistroEscrituracao(gm_escrituracao::Escrituracao *escrituracao);

<<<<<<< HEAD
        bool addRegistro(QString nomeTabela, QList<InformacoesCampos> listaCampos);
=======
        /**
          * @author Daniel Santos
          * @date   05/07/2018
          * @brief  inserir método responsável por
          * @param  nomeTabela um objeto QString
          * @param  conteudoStringQuery um objeto QString
          * @return TRUE caso inserido com sucesso, do contrário FALSE.
          */
        bool inserir(QString nomeTabela = QString(), QString conteudoStringQuery = QString());
>>>>>>> 89ea464d36a018c0cef1a56fdbf4551449ec58ca

    private:

        /*############################## Atributos ##################################*/

        QSqlDatabase _db;

        gm::GMErro _lastError;

        /*############################ Métodos de Ação ##############################*/

        /**
          * @author Daniel Santos
          * @date   05/07/2018
          * @brief  criarAmbienteDatabasePadrao método responsável.
          */
        void criarAmbienteDatabasePadrao();

        /**
          * @author Daniel Santos
          * @date   05/07/2018
          * @brief  criarTabelaEscrituracaoMaster método responsável.
          * @param  nomeTabela um objeto de QString contendo como conteúdo o nome da tabela a ser criada
          */
        void criarTabelaEscrituracaoMaster(QString nomeTabela);

        /**
          * @author Daniel Santos
          * @date   05/07/2018
          * @brief  criarTabelaDiretorioPadraoMaster método responsável.
          * @param  nomeTabela um objeto de QString contendo como conteúdo o nome da tabela a ser criada
          */
        void criarTabelaDiretorioPadraoMaster(QString nomeTabela);

        void outPutDebug(QVariant value = QVariant());
};

#endif // DBMANAGER_H
